package com.dobuki.yahooks
{
	import flash.display.MovieClip;
	import flash.events.ErrorEvent;
	import flash.events.Event;
	import flash.events.EventDispatcher;
	import flash.utils.ByteArray;
	import flash.utils.describeType;
	import flash.utils.getQualifiedClassName;
	import flash.utils.getTimer;
	
	import playerio.Client;
	import playerio.Connection;
	import playerio.Message;
	import playerio.PlayerIO;
	import playerio.PlayerIOError;
	import playerio.RoomInfo;

	public class Yahooks extends BaseYahooks
	{
		private var dispatcher:EventDispatcher = new EventDispatcher();
		
		static public var gameType:String = "ProxyCat";
		static public var gameId:String = "proxycat-yernx6apdugc40enwzpxma";
		static public var online:Boolean = false;
		static public var ip_address:String = "172.16.73.128:8184";
		
		static private var _instance:Yahooks = new Yahooks();
		
		private var connections:Object = {};
		private var pendingConnections:Object = {};
		private var client:Client;
		private var _tick:uint = 0;
		private var _localTick:uint = 0;
		private var _frame:int = 0;
		
		public function Yahooks():void {
		}
		
		static public function get instance():IYahooks {
			return _instance;
		}
		
		override public function connect(root:MovieClip,username:String=null,room:String=null,joinData:Object=null):void {
			super.connect(root,username,room,joinData);
			PlayerIO.connect(
				root.stage,							//Referance to stage
				gameId,								//Game id (Get your own at playerio.com. 1: Create user, 2:Goto admin pannel, 3:Create game, 4: Copy game id inside the "")
				"public",							//Connection id, default is public
				username,							//Username
				"",									//User auth. Can be left blank if authentication is disabled on connection
				null,								//Current PartnerPay partner.
				handleConnect,						//Function executed on successful connect
				handleError							//Function executed if we recive an error
			);
			root.addEventListener(Event.ENTER_FRAME,loop);
		}
		
		override public function disconnect():void {
			for each(var room:String in connections) {
				leaveRoom(room);
			}
			client = null;
			
			_tick = 0;
			_localTick = 0;
			_frame = 0;
			super.disconnect();
		}
		
		private function loop(e:Event):void {
			if(!_tick)
				return;
			var playing:Boolean = true;
			if(_localTick>=_tick*5) {
				playing = false;
			}
			else if(_tick*5-_localTick>5) {
				_localTick = (_tick*5-_localTick)/2;
				_frame++;
			}
			else {
				_localTick++;
				_frame++;
			}

			for each (var hookInfo:HookInfo in _hookInfo) {
				if(hookInfo.loopFunction!=null) {
					hookInfo.loopFunction.call(hookInfo.hook,playing);
				}
			}
		}
		
		override public function get frame():uint
		{
			return _frame;
		}
		
		override public function joinRoom(room:String,joinData:Object=null):void 
		{
			if(!connections[room]) {
				pendingConnections[room] = [];
				
				if(!client) {
					dispatcher.addEventListener(Event.CONNECT,
						function(e:Event):void {
							e.currentTarget.removeEventListener(e.type,arguments.callee);
							performJoin(room,joinData);
						});
				}
				else {
					performJoin(room,joinData);
				}
			}
		}
		
		private function performJoin(room:String,joinData:Object):void {
			client.multiplayer.createJoinRoom(
				room,								//Room id. If set to null a random roomid is used
				gameType,							//The game type started on the server
				true,								//Should the room be visible in the lobby?
				{},									//Room data. This data is returned to lobby list. Variabels can be modifed on the server
				joinData,							//User join data
				handleJoin,							//Function executed on successful joining of the room
				handleError							//Function executed if we got a join error
			);			
		}
		
		override public function leaveRoom(room:String):void 
		{
			var connection:Connection = connections[room];
			if(connection) {
				connection.disconnect();
			}
			delete pendingConnections[room];
			delete connections[room];
		}
		
		private function handleConnect(client:Client):void{
			trace("Sucessfully connected to Yahoo Games Network");
			this.client = client;
			//Set developmentsever (Comment out to connect to your server online)
			if(!online)
				client.multiplayer.developmentServer = ip_address;
			
			dispatcher.dispatchEvent(new Event(Event.CONNECT));
		}
		
		private function handleError(error:PlayerIOError):void{
			dispatcher.dispatchEvent(new ErrorEvent("PlayerIOError",false,false,error.message,error.errorID));
		}
		
		override public function listRooms(callback:Function):void {
			if(!client) {
				dispatcher.addEventListener(Event.CONNECT,
					function(e:Event):void {
						e.currentTarget.removeEventListener(e.type,arguments.callee);
						performListRooms(callback);
					});
			}
			else {
				performListRooms(callback);
			}
		}
		
		private function performListRooms(callback:Function):void {
			client.multiplayer.listRooms(gameType,{},100,0,
				function(rooms:Array):void {
					var array:Array = [];
					for each(var room:RoomInfo in rooms)
					{
						var r:Room = new Room();
						r.name = room.id;
						r.data = room.data;
						r.count = room.onlineUsers;
						array.push(r);
					}
					callback(array);
				});
		}
		
		private function handleJoin(connection:Connection):void{
			connections[connection.roomId] = connection;
			
			trace("Sucessfully connected to the multiplayer room "+connection.roomId);
			
			connection.addMessageHandler("send",function(m:Message):void {
				for(var i:int=1;i<m.length;i+=3) {
					var objectId:String = m.getString(i+0);
					var hook:Object = _hooks[objectId];
					if(hook) {
						var action:String = m.getString(i+1);
						if(hook.hasOwnProperty(action)) {
							var func:Function = hook[action];
							var bytes:ByteArray = m.getByteArray(i+2);
							bytes.position = 0;
							var params:Array = bytes.readObject();
							func.apply(hook,params);
						}
					}
				}
			});
			
			connection.addMessageHandler("leaderboard",function(m:Message):void {
				for(var i:int=0;i<m.length;i+=2) {
					var name:String = m.getString(i+0);
					var score:int = _hooks[objectId];
					if(hook) {
						var action:String = m.getString(i+1);
						if(hook.hasOwnProperty(action)) {
							var func:Function = hook[action];
							var bytes:ByteArray = m.getByteArray(i+2);
							bytes.position = 0;
							var params:Array = bytes.readObject();
							func.apply(hook,params);
						}
					}
				}
			});

			connection.addMessageHandler("tick",function(m:Message,tick:uint):void {
				_tick = tick;
			});
			
			connection.addMessageHandler("playerLeft",function(m:Message,playerName:String):void {
				for each (var hookInfo:HookInfo in _hookInfo) {
					if(hookInfo.leaveFunction!=null) {
						hookInfo.leaveFunction.call(hookInfo.hook,playerName);
					}
				}
			});

			connection.addMessageHandler("joined",function(m:Message,count:int):void {
				for each (var hookInfo:HookInfo in _hookInfo) {
					if(hookInfo.joinFunction!=null) {
						hookInfo.joinFunction.call(hookInfo.hook,count);
					}
				}
			});
			
			connection.addDisconnectHandler(function():void {
				delete connections[connection.roomId];
			});
			
			var array:Array = pendingConnections[connection.roomId];
			if(array) {
				delete pendingConnections[connection.roomId];
				for each(var params:Array in array) {
					connection.send.apply(connection,params);
				}
			}
		}
		
		override public function call(hook:Object,action:String,persist:Boolean,...params):void {
			var info:HookInfo = _hookInfo[hook];
			var bytes:ByteArray = new ByteArray();
			bytes.writeObject(params);
			sendServerMessage(info.room,"send",persist,info.id,action,bytes);
		}
		
		private function sendServerMessage(roomId:String,message:String,...params):void {
			for each(var connection:Connection in connections) {
				if(!roomId||roomId==connection.roomId) {
					connection.send.apply(connection,[message].concat(params))
				}
			}
			for (var pendingRoomId:String in pendingConnections) {
				if(!roomId||pendingRoomId==roomId) {
					var array:Array = pendingConnections[pendingRoomId];
					array.push([message].concat(params));
				}
			}
		}
	}
}